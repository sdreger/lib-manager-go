// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

//go:build !build

package v1

import (
	"context"

	"github.com/sdreger/lib-manager-go/internal/domain/publisher"
	"github.com/sdreger/lib-manager-go/internal/paging"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPublisherService creates a new instance of MockPublisherService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPublisherService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPublisherService {
	mock := &MockPublisherService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPublisherService is an autogenerated mock type for the PublisherService type
type MockPublisherService struct {
	mock.Mock
}

type MockPublisherService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPublisherService) EXPECT() *MockPublisherService_Expecter {
	return &MockPublisherService_Expecter{mock: &_m.Mock}
}

// GetPublishers provides a mock function for the type MockPublisherService
func (_mock *MockPublisherService) GetPublishers(ctx context.Context, pageRequest paging.PageRequest, sort paging.Sort) (paging.Page[publisher.LookupItem], error) {
	ret := _mock.Called(ctx, pageRequest, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetPublishers")
	}

	var r0 paging.Page[publisher.LookupItem]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, paging.PageRequest, paging.Sort) (paging.Page[publisher.LookupItem], error)); ok {
		return returnFunc(ctx, pageRequest, sort)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, paging.PageRequest, paging.Sort) paging.Page[publisher.LookupItem]); ok {
		r0 = returnFunc(ctx, pageRequest, sort)
	} else {
		r0 = ret.Get(0).(paging.Page[publisher.LookupItem])
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, paging.PageRequest, paging.Sort) error); ok {
		r1 = returnFunc(ctx, pageRequest, sort)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPublisherService_GetPublishers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublishers'
type MockPublisherService_GetPublishers_Call struct {
	*mock.Call
}

// GetPublishers is a helper method to define mock.On call
//   - ctx
//   - pageRequest
//   - sort
func (_e *MockPublisherService_Expecter) GetPublishers(ctx interface{}, pageRequest interface{}, sort interface{}) *MockPublisherService_GetPublishers_Call {
	return &MockPublisherService_GetPublishers_Call{Call: _e.mock.On("GetPublishers", ctx, pageRequest, sort)}
}

func (_c *MockPublisherService_GetPublishers_Call) Run(run func(ctx context.Context, pageRequest paging.PageRequest, sort paging.Sort)) *MockPublisherService_GetPublishers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(paging.PageRequest), args[2].(paging.Sort))
	})
	return _c
}

func (_c *MockPublisherService_GetPublishers_Call) Return(page paging.Page[publisher.LookupItem], err error) *MockPublisherService_GetPublishers_Call {
	_c.Call.Return(page, err)
	return _c
}

func (_c *MockPublisherService_GetPublishers_Call) RunAndReturn(run func(ctx context.Context, pageRequest paging.PageRequest, sort paging.Sort) (paging.Page[publisher.LookupItem], error)) *MockPublisherService_GetPublishers_Call {
	_c.Call.Return(run)
	return _c
}
