// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

//go:build !build

package v1

import (
	"context"
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockCoverService creates a new instance of MockCoverService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCoverService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCoverService {
	mock := &MockCoverService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCoverService is an autogenerated mock type for the CoverService type
type MockCoverService struct {
	mock.Mock
}

type MockCoverService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCoverService) EXPECT() *MockCoverService_Expecter {
	return &MockCoverService_Expecter{mock: &_m.Mock}
}

// GetBookCover provides a mock function for the type MockCoverService
func (_mock *MockCoverService) GetBookCover(ctx context.Context, filePath string) (io.Reader, error) {
	ret := _mock.Called(ctx, filePath)

	if len(ret) == 0 {
		panic("no return value specified for GetBookCover")
	}

	var r0 io.Reader
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (io.Reader, error)); ok {
		return returnFunc(ctx, filePath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) io.Reader); ok {
		r0 = returnFunc(ctx, filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, filePath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCoverService_GetBookCover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBookCover'
type MockCoverService_GetBookCover_Call struct {
	*mock.Call
}

// GetBookCover is a helper method to define mock.On call
//   - ctx
//   - filePath
func (_e *MockCoverService_Expecter) GetBookCover(ctx interface{}, filePath interface{}) *MockCoverService_GetBookCover_Call {
	return &MockCoverService_GetBookCover_Call{Call: _e.mock.On("GetBookCover", ctx, filePath)}
}

func (_c *MockCoverService_GetBookCover_Call) Run(run func(ctx context.Context, filePath string)) *MockCoverService_GetBookCover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCoverService_GetBookCover_Call) Return(reader io.Reader, err error) *MockCoverService_GetBookCover_Call {
	_c.Call.Return(reader, err)
	return _c
}

func (_c *MockCoverService_GetBookCover_Call) RunAndReturn(run func(ctx context.Context, filePath string) (io.Reader, error)) *MockCoverService_GetBookCover_Call {
	_c.Call.Return(run)
	return _c
}
