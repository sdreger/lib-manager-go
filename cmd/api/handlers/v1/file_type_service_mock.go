// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

//go:build !build

package v1

import (
	"context"

	"github.com/sdreger/lib-manager-go/internal/domain/filetype"
	"github.com/sdreger/lib-manager-go/internal/paging"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFileTypeService creates a new instance of MockFileTypeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileTypeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileTypeService {
	mock := &MockFileTypeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFileTypeService is an autogenerated mock type for the FileTypeService type
type MockFileTypeService struct {
	mock.Mock
}

type MockFileTypeService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileTypeService) EXPECT() *MockFileTypeService_Expecter {
	return &MockFileTypeService_Expecter{mock: &_m.Mock}
}

// GetFileTypes provides a mock function for the type MockFileTypeService
func (_mock *MockFileTypeService) GetFileTypes(ctx context.Context, pageRequest paging.PageRequest, sort paging.Sort) (paging.Page[filetype.LookupItem], error) {
	ret := _mock.Called(ctx, pageRequest, sort)

	if len(ret) == 0 {
		panic("no return value specified for GetFileTypes")
	}

	var r0 paging.Page[filetype.LookupItem]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, paging.PageRequest, paging.Sort) (paging.Page[filetype.LookupItem], error)); ok {
		return returnFunc(ctx, pageRequest, sort)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, paging.PageRequest, paging.Sort) paging.Page[filetype.LookupItem]); ok {
		r0 = returnFunc(ctx, pageRequest, sort)
	} else {
		r0 = ret.Get(0).(paging.Page[filetype.LookupItem])
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, paging.PageRequest, paging.Sort) error); ok {
		r1 = returnFunc(ctx, pageRequest, sort)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileTypeService_GetFileTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileTypes'
type MockFileTypeService_GetFileTypes_Call struct {
	*mock.Call
}

// GetFileTypes is a helper method to define mock.On call
//   - ctx
//   - pageRequest
//   - sort
func (_e *MockFileTypeService_Expecter) GetFileTypes(ctx interface{}, pageRequest interface{}, sort interface{}) *MockFileTypeService_GetFileTypes_Call {
	return &MockFileTypeService_GetFileTypes_Call{Call: _e.mock.On("GetFileTypes", ctx, pageRequest, sort)}
}

func (_c *MockFileTypeService_GetFileTypes_Call) Run(run func(ctx context.Context, pageRequest paging.PageRequest, sort paging.Sort)) *MockFileTypeService_GetFileTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(paging.PageRequest), args[2].(paging.Sort))
	})
	return _c
}

func (_c *MockFileTypeService_GetFileTypes_Call) Return(page paging.Page[filetype.LookupItem], err error) *MockFileTypeService_GetFileTypes_Call {
	_c.Call.Return(page, err)
	return _c
}

func (_c *MockFileTypeService_GetFileTypes_Call) RunAndReturn(run func(ctx context.Context, pageRequest paging.PageRequest, sort paging.Sort) (paging.Page[filetype.LookupItem], error)) *MockFileTypeService_GetFileTypes_Call {
	_c.Call.Return(run)
	return _c
}
