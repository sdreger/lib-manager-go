// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

//go:build !build

package v1

import (
	"context"

	"github.com/sdreger/lib-manager-go/internal/domain/book"
	"github.com/sdreger/lib-manager-go/internal/paging"
	mock "github.com/stretchr/testify/mock"
)

// NewMockBookService creates a new instance of MockBookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookService {
	mock := &MockBookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBookService is an autogenerated mock type for the BookService type
type MockBookService struct {
	mock.Mock
}

type MockBookService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookService) EXPECT() *MockBookService_Expecter {
	return &MockBookService_Expecter{mock: &_m.Mock}
}

// GetBookByID provides a mock function for the type MockBookService
func (_mock *MockBookService) GetBookByID(ctx context.Context, bookID int64) (book.Book, error) {
	ret := _mock.Called(ctx, bookID)

	if len(ret) == 0 {
		panic("no return value specified for GetBookByID")
	}

	var r0 book.Book
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (book.Book, error)); ok {
		return returnFunc(ctx, bookID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) book.Book); ok {
		r0 = returnFunc(ctx, bookID)
	} else {
		r0 = ret.Get(0).(book.Book)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, bookID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookService_GetBookByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBookByID'
type MockBookService_GetBookByID_Call struct {
	*mock.Call
}

// GetBookByID is a helper method to define mock.On call
//   - ctx
//   - bookID
func (_e *MockBookService_Expecter) GetBookByID(ctx interface{}, bookID interface{}) *MockBookService_GetBookByID_Call {
	return &MockBookService_GetBookByID_Call{Call: _e.mock.On("GetBookByID", ctx, bookID)}
}

func (_c *MockBookService_GetBookByID_Call) Run(run func(ctx context.Context, bookID int64)) *MockBookService_GetBookByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockBookService_GetBookByID_Call) Return(book1 book.Book, err error) *MockBookService_GetBookByID_Call {
	_c.Call.Return(book1, err)
	return _c
}

func (_c *MockBookService_GetBookByID_Call) RunAndReturn(run func(ctx context.Context, bookID int64) (book.Book, error)) *MockBookService_GetBookByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetBooks provides a mock function for the type MockBookService
func (_mock *MockBookService) GetBooks(ctx context.Context, pageRequest paging.PageRequest, sort paging.Sort, filter book.Filter) (paging.Page[book.LookupItem], error) {
	ret := _mock.Called(ctx, pageRequest, sort, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetBooks")
	}

	var r0 paging.Page[book.LookupItem]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, paging.PageRequest, paging.Sort, book.Filter) (paging.Page[book.LookupItem], error)); ok {
		return returnFunc(ctx, pageRequest, sort, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, paging.PageRequest, paging.Sort, book.Filter) paging.Page[book.LookupItem]); ok {
		r0 = returnFunc(ctx, pageRequest, sort, filter)
	} else {
		r0 = ret.Get(0).(paging.Page[book.LookupItem])
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, paging.PageRequest, paging.Sort, book.Filter) error); ok {
		r1 = returnFunc(ctx, pageRequest, sort, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookService_GetBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBooks'
type MockBookService_GetBooks_Call struct {
	*mock.Call
}

// GetBooks is a helper method to define mock.On call
//   - ctx
//   - pageRequest
//   - sort
//   - filter
func (_e *MockBookService_Expecter) GetBooks(ctx interface{}, pageRequest interface{}, sort interface{}, filter interface{}) *MockBookService_GetBooks_Call {
	return &MockBookService_GetBooks_Call{Call: _e.mock.On("GetBooks", ctx, pageRequest, sort, filter)}
}

func (_c *MockBookService_GetBooks_Call) Run(run func(ctx context.Context, pageRequest paging.PageRequest, sort paging.Sort, filter book.Filter)) *MockBookService_GetBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(paging.PageRequest), args[2].(paging.Sort), args[3].(book.Filter))
	})
	return _c
}

func (_c *MockBookService_GetBooks_Call) Return(page paging.Page[book.LookupItem], err error) *MockBookService_GetBooks_Call {
	_c.Call.Return(page, err)
	return _c
}

func (_c *MockBookService_GetBooks_Call) RunAndReturn(run func(ctx context.Context, pageRequest paging.PageRequest, sort paging.Sort, filter book.Filter) (paging.Page[book.LookupItem], error)) *MockBookService_GetBooks_Call {
	_c.Call.Return(run)
	return _c
}
